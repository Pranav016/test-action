name: CI-CD

on:
    push:
        branches: ['master']
        paths-ignore:
            - '**.md'
    pull_request:
        branches: ['master']
        paths-ignore:
            - '**.md'
    workflow_dispatch:

jobs:
    ci-cd:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"
            - name: cache lookup
              uses: actions/cache@v2
              id: cache
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-
            - name: setup node
              uses: actions/setup-node@v2
              with:
                  node-version: '16.x'
            - name: install dependencies
              if: ${{ steps.cache.outputs.cache-hit != true }}
              run: yarn install --frozen-lockfile
            - name: static tests
              run: yarn lint-check
            - name: conflicts lint-prettier
              run: yarn run eslint-prettier-check
            - name: running tests and generating coverage report
              run: yarn coverage:ci
            - name: upload code coverage report to codecov
              uses: codecov/codecov-action@v2
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  files: coverage/clover.xml
                  fail_ci_if_error: false
                  verbose: true
            - name: build
              run: yarn build
            - name: Upload build
              uses: actions/upload-artifact@v2
              with:
                  name: build
                  path: './build'
            - name: zip assets
              run: |
                  zip -r build.zip ./build
            - name: deploy to staging
              id: staging
              run: |
                  curl -H "Content-Type: application/zip" \
                  -H "Authorization: Bearer ${{ secrets.NETLIFY_AUTH_TOKEN }}" \
                  -H "draft: true" \
                  --data-binary "build.zip" \
                  https://api.netlify.com/api/v1/sites/serverflow.netlify.app/deploys
              env:
                  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
            - name: deploy to production
              if: ${{ steps.staging.outcome != 'failed' }}
              uses: nwtgck/actions-netlify@v1.2.3
              with:
                  publish-dir: './build'
                  production-branch: 'master'
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  deploy-message: '${{ github.event.head_commit.message }}'
                  enable-pull-request-comment: false
                  enable-commit-comment: true
              env:
                  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
                  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
              timeout-minutes: 20
